인터넷이란 어떻게 작동하는가?
Src = https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm
Rus Shuler, 1998 
Updates made 2002

1.서론

 인터넷의 성장은 폭발적이며, 텔레비전이나 라디오, 잡지등에서 www.com등이 지속적으로 쏟아져나오는 것 에서 도망칠 수 없다. 인터넷은 우리 삶에서 거대한 부분이 됐기 때문에, 이 도구를 효과적으로 이용하기 위해 이를 잘 이해하고 있어야한다.

 이 백서는 인터넷이 작동하게 만드는 그 기저속 기반들과 기술들을 설명한다. 깊게 파고들지는 않지만 개념들을 이해시키기 위해 충분한 범위를 포함한다. 답변하지 못한 많은 질문등을 위해 이 문서 말미에 참고 문헌등을 표시했다.

2. 어디서 시작해볼까? 인터넷 주소

 인터넷은 컴퓨터들의 전세계적 연결망이기 때문에 인터넷에 연결된 각 컴퓨터들은 고유의 주소를 가지고 있어야 한다. 인터넷 주소들은 nnn.nnn.nnn.nnn의 형태인데, nnn은 0-255의 숫자가 되어야 한다. 이 주소는 ip주소라고 알려져 있다.(internet Protocol)

 아래의 사진은 인터넷에 연결된 두컴퓨터들을 표현하고 있다. 당신의 컴퓨터가 1.2.3.4의 주소를 가지고 있고 상대방이 5.6.7.8을 가지고 있을때, 인터넷은 그 사이간의 추상적인 어떤 것이라고 할 수 있다. (이 문서를 서술하며, 다이어 그램 1은 인터넷의 디테일을 표현하기위해 몇번이고 다시 사용될 것이다) 

 만약 internet service provider(ISP) 를 통해 인터넷에 연결 돼 있다면. 대게 원격 접속 중
일시적 아이피 주소를 부여받게 된다. 만약 LAN(local area network)을 통해 아마 영구 아이피 주소를 가지거나, DHCP(Dynamic Host Configuration Protocol)서버에서 임시 주소 하나를 받게 될 것이다. 어떠한 경우이든 인터넷에 연결된다면, 그 컴퓨터는 유일한 아이피 주소를 가지게 된다.

==알아보기 - 핑프로그램.

 만약 마소 윈도우나 유닉스 계열을 사용하면서 인터넷에 연결되어 있다면 컴퓨터상의 인터넷이 잘 작동하는지 알아볼 수 있는 편리한 프로그램이 있다. 핑이라고 불리며 아마 오래된 잠수함 소나시스템의 소리에서 따온 것 같다. 만약 윈도우를 사용하고 있으면 윈도우 커맨드를 실행해봐라. 만약 유닉스 계열을 사용하고 있다면 커맨드를 실행해봐라. 그리고 난뒤 ping www.yahoo.com을 친다면, 핑프로그램은 핑을 호명된 컴퓨터에 전송할 것이다(사실 ICMP(internet control message protocol) 응답 요청 메시지라고 할 수있다). 그다음 핑이 전송된 컴퓨터에서는 답장을 보낼 것이다. 이후 핑 프로그램은 답장이 돌아올때까지의 경과시간을 셀 것이다. 또한 ping에 도메인 네임(www.yahoo.com)등 을 아이피주소 대신 입력한다면. 핑은 도메인 네임을 해석하고 그 컴퓨터의 아이피 주소를 보여 줄 것이다. 추후 dns에서 더 자세히 알아볼 것임.

3. 프로토콜 스택과 패킷.

 그래서 당신의 컴퓨터는 인터넷에 연결되고 유일한 주소를 가지고 있다. 그런데 그래서 인터넷에 연결된 다른 컴퓨터들과 어떻게 대화한다는 말인가? 다음의 예를 참고하자. 1.2.3.4의 주소를 가진 당신의 컴퓨터가 5.6.7.8이라는 컴퓨터에 메시지를 보내고 싶다고 가정하자. 당신이 보내고 싶은 메시지는 "안녕 5.6.7.8!"이다. 분명히 메시지는 당신의 컴퓨터와 연결된 선의 종류와 상관 없이 전송 되었을 것이다. 만약 당신 집의 isp에 통신을 시도했고 메시지는 전화선을 통해 전송되었다고 가정하자. 그러므로 메시지는 알파벳 글자에서 전기적 신호로 변경되어 인터넷을 통해 전송 되었을 것이고, 다시 문자적 글자로 번역되었을 것이다. 이게 어떻게 달성될까? 바로 프로토콜 스택의 사용에 의해서이다. 모든 컴퓨터는 인터넷상에서 통신하기 위해 이것을 필요로 하며, 대게 컴퓨터 운영체제 위에서 작동한다. 인터넷상의 프로토콜 스택은 두가지 주요 통신 프로토콜이 사용 된, tcp/ip프로토콜 스택으로서 참조되어 지고는 한다. Tcp/ip 스택은 다음과 같이 생겼다.

Application protocols layer - www, e mail, ftp와 같은 응용프로그램에 특화된 프로토콜이다.

Transmission Control Protocol layer - tcp는 패킷들이 포트넘버를 사용하는 구체적인 어플리 케이션들에 접근 할 수 있도록 지시한다.

Internet Protocol Layer - IP는 패킷들이 아이피 주소를 사용하는 구체적인 컴퓨터에 접근 할 수 있도ㅗㄹㄱ 해준다.

Hardware layer - 2진수 패킷 데이터들을 네트워크 신호로 바꾸거나 환원한다. (이더넷 네트워크 카드, 전화선을 통한 모뎀등)

 "안녕 5.6.7.8 "이라는 메시지가 보내지는 과정을 살펴보자.
당신의 컴퓨터인 1.2.3.4에서는 어플 - tcp - ip - hardware - internet. 
5.6.7.8에서는 인터넷 - 하드웨어 - ip - tcp - 어플의 순서를 지난다.

 -1 메시지는 프로토콜 스택의 맨 상단에서 시작해 하부로 갈 것이다.
 -2 만약 보내질 메시지가 너무 길다면 메시지가 지나는 각각의 스택 층들은 메시지를 작은 덩어리로
    쪼갤 것이다. 이 것은 인터넷(거의 대부분의 컴퓨터 네트워크들 등)을 통해 보내지는 데이터들은
    관리 가능한 작은 ㅈ단위로 쪼개지기 때문이다. 인터넷에서 이런 작은 데이터 쪼각은 패킷으로
    알려져 있다.
 -3 패킷은 어플 층을 지날 것이고 이어서 tcp층계로 갈 것이다. 각 패킷에는 포트넘버가 부여된다.
    포트는 나중에 설명할 것이라, 많은 프로그램들이 tcp ip스택을 사용해 메시지를 보낸다고 알고
    있으면 충분하다.

 -4 tcp계층을 지난다면 패킷들은 ip계층으로 진행한다.이곳에서 각각의 패킷들은 목표주소인 5.6.7.8
    을 부여받게 된다.

 -5 이제 메시지 패킷들은 포터넘버와 ipnw소를 가지게 되었다. 이제 인터넷을 통해 발송될 준비가 된  
    것이다.하드웨어 층계에서는 문자 패킷을 포함한 우리 메시지가 전기적 신호로 바뀌고 전화선을 통해
    전송되는 것을 관리한다.

 -6 그리고 전화선의 끝애서 당신의 isp는 인터넷에 직접적인 연결을 ㄱ ㅏㅈ고 있다. isp들의 라우터 
    는각각 패킷들의 목표 주소를 검사하고 어떤 경로를 통해 보낼지 결정한다. 자주 패킷의 다음 목표
    지는 다른 라우터가 되는데, 라우터들과 인터넷 기반들에 대해서는 나중에 더 자세히 알아본다.

 -7 결국 패킷들은 5.6.7.8 컴퓨터에 도착하는데 성공한다. 이곳에서 컴퓨터는 하부에서 상방으로 가는
    방식으로 tcp/ip 스택을 따라간다.

 -8 스택을 통해 패킷이 상방으로 진행할 때에, 송신 측 컴퓨터에서 스택을 진행할때에 붙여졌던 모든
    라우팅 데이터들(ip주소나, 포트번호따위와 같은)등은 하나씩 벗겨진다.

 -9 만약 스택의 최상단에 데이터가 도달한다면 이제 패킷들은 그 원형인 "안녕 5.6.7.8"로 복원됐다.

4. 네트워크 기반 networking infrastructure.

 그래서 이제 당신은 한컴퓨터에서 인터넷을 통해 어떻게 다른 컴퓨터로 패킷이 이동하는지 알게 됐다.
하지만 그 사이에 뭐가 있는지 제대로 알고 있는가. 어떤게 인터넷을 구성하는가? 다음의 그림을 보세요~
여기 다이어 그램 1에서 좀더 디테일화된 그림이 있다. 전화통신망이 isp에게 향하는 이 부분까지는 이해하기 쉬울 것이다. 하지만 그것을 넘어선다면 설명이 좀 필요하겠다.

 isp는 원격 고객을 위해 모뎀 풀을 유지한다. 이것은 모뎀 풀에서 백본이나 전용 라우터까지의 데이터 흐름을 제어하는 형태의 컴퓨터에 의해 관리된다. 이런 구조는 네트워크에 대한 접근을 제공하기 때문에 포트서버라고 불릴 수도 있을 것이다. 청구 및 사용정보또한 이곳에서 수집된다.

 당신의 패킷이 전화 통신망과 당신 ips의 지역적 장비를 통과 했다면, isp의 백본이나, isp가 구매한 광대역의 백본으로 라우팅된다.
이곳에서 패킷은 그들이 목적지를 찾을 때까지 대게 몇개의 라우터나 몇개의 백본, 전용선, 다른네트워크들을 거쳐 이동한다. 하지만 패킷이 구체적으로 인터넷에서 어떻게 이동한 경로를 안다면 정말 좋지 멋지지 않을까. 다음과 같은 방법이있다..

-더 알아보세요. Traceroute program.

 만약 윈도우나 유닉스 계열을 사용하고 인터넷에 연결 되어있다면 , 편리한 도구가 있다. traceroute라고 불리는 프로그램인데 특정한 인터넷 목표지로이동하는 경로를 보여준다. Ping 프로그램처럼. 커맨드를 통해서 traceroute에 접근해야 한다. 윈도우에서는 tracert www.yahoo.com 유닉스에서는 traceroute www.yahoo.com을 타이핑 하면 된다. 트레이스 루트는 패킷이 목적지에 도달하기위해 돌아다는 모든 라우터, 컴퓨터 등 다른 인터넷 개체들의 리스트를 반환할 것이다.

 만약 트레이스루트 프로그램을 사용한다면 패킷이 목적지까지 도달하기 위해 얼마나 많은 곳들을 경유해야하는지 알게 될 것이다. 대부분의 경로들은 sjc2-core1-h2-0-0.atlas.digex.net and fddi0-0.br4.SJC.globalcenter.net.과 같이 긴 이름들을 가지고 있다. 이것들은 패킷의 경로를 결정하는 인터넷 라우터들이다. 몇개의 라우터들이 모식도 3에서 보여지고 있지만, 일부에 불과하다. 모식도 3은 간단한 네트워크 구조를 보여주고있으나 실제 인터넷은 훨씬 복잡하다.

5. 인터넷 기반구조

 인터넷 백본은 상호 연결된 거대한 네트워크로 구성되어져 있다. 이 거대한 네트워크들은 NSP(network service provider)로 알려져 있다. 거대규모의 nsp예로는 uunet, cerfnet, ibm, bbn planet, sprint net, spinet, 등등이 있겠다. 이 네트워크들은 패킷 트래픽을 교환하기위해 서로 협조한다.각 NSP는 세개의 Network Access Points, NAP에 연결되어야 한다. 이 nap에서 패킷 트래픽은 한 nsp에서 다른 nsp로 이동한다. NSP는 또한 MAE(metropolitan area exchanges) 에서 상호 연결된다. mae는 nsp와 비슷한 것들을 제공하지만 좀 더 민간화되고 사유화 돼 있다. Nap는 본래 인터넷 간 상호 연결지점이였다. nap든 mae든 둘다 인터넷 교환지점 internet exchange points(IEP)나 IX라고 불린다. nsp는 또한 대역폭을 isp나 작은 광대역 제공자들에 판다.아래 이미지는 수직계층적 기반 구조를 보여준다.

 모식도4는 인터넷의 실제적인 부분을 보여 주지는 않는다. 모식도4는 오직 nsp가 어떻게 상호 연결되고 더 작은 isp와 연결돼 있는지 보여주기 위함이다. 모식도 4에서는 어떤 물리적 네트워크 요소도 모식도3에서 처럼 표현되지 않았다. 이는 한개의 nsp백본 구조가 훨씬 그려지기 복잡하기 때문이다. 대부분의 nsp는 그들 통신구조도를 그들의 웹사이트에 그려놓고는 하는데, 이는 쉽게 발견할 수 있다. 인터넷의 실제적인 모습을 그리는 것은 그 크기와복잡성, 계속바뀌고 있는 구조때문에 불가능하다.

6.인터넷 라우팅의 수직체계.

 그래서 패킷들은 인터넷을 가로지르는 경로들을 어떻게 찾아낼까? 인터넷에 연결된 모든 컴퓨터들은 다른 컴퓨터들이 어디 있는지 실제 알기라도 한단 말인가? 패킷들은 그냥 단순히 인터넷상 모든 컴퓨터에 방송되는 것일 뿐인가?  상기 두 질문들에 대한 대답은 아니요다. 어떤 컴퓨터도 다른 컴퓨터가 어디 있는지 알지는 못한다. 패킷이 목적지를 찾아갈때 사용되는 정보는 인터넷에 연결된 각각 모든 라우터들에 의해 라우팅테이블에 담겨 있다.

 라우터는 패킷 스위치이다. 라우터는 대게 네트워크 사이에서 그들 사이의 패킷경로를 지정하기 위해 연결되어 있다. 각 라우터들은 하부 네트워크나 그들이 사용하는 아이피 주소들에 대해서만 알고 있다. 대게 라우터들은 그 상위의 아이피 주소들에 대해 알고 있지 않다. 아래의 모식도5를 보자. 각 백본에 연결 돼 있는 검은색 박스들은 라우터이다. nsp의 큰 백본들은 최상위에 위치한 nap에서 서로연결 되어 있다. 그 밑에 있는 것은 몇개의 하부 네트워크들이고 그 아래에는 더 많은 하부 네트워크들이 연결 되어 있다.  가장 하부에 위치한 것은 컴퓨터들이 연결된 local area network 이다.

 패킷이 라우터에 도착하면, 송신측 ip 프로토콜 계층에서 적힌 ip주소를 검사한다. 라우터는 라우팅 테이블을 검사하고, 만약 ip주소를 포함하는 네트워크를 발견하게 되면 패킷을 해당 네트워크로 보낸다. 만약 ip주소를 포함하는 네트워크가 발견되지 않으면 라우터는 대게 디폴트 루트( 백본 체계를 거슬러올라 다음 라우터로)로 패킷을 보낸다. 다음 라우터는 패킷 전송지를 알고 있을거라는 희망으로. 라우터들은 대개 가장 큰 크기의 라우팅 테이블을 가지고 있는 nsp백본에 연결되어 있는데,이곳에서 패킷은 다시 목적지를 찾을때까지 하향 여행할 정확한 백본으로 라우팅 될 것이다.

7. 도메인 이름과 주소의 분석.

 당신이 연결되고 싶은 컴퓨터의 아이피 주소를 모른다면 어떻게 할 것인가? 만약 당신이 www.anothercomputer.com 같은 다른 웹서버로 접근하야 한다면 어떻게 할 것인가? 이 모든 질문에 대한 답은 DNS(domain name service)이다. dns는 컴퓨터의 이름을 걔속 추적해 그에 상응하는 아이피 주소를 인터넷에서 계속 추적해가는 배포된 데이터 베이스 라고 할 수 있다.

 인터넷에 연결된 많은 컴퓨터들이 dns 데이터 베이스나 다른 컴퓨터에 접근할 수 있도록 허락하는 소프트웨어를 호스트한다. 이런 컴퓨터들은 dns 서버라고 알려져 있다. 하지만 dns서버가 모든 데이터 베이스를 포함한다는 것은 아니다. 단지 일부만 가지고 있을 뿐이다. 만약 dns서버가 다른 컴퓨터에 의해 요청된 도메인 네임을 가지고 있지 않다면, dns서버는 요청중인 컴퓨터를 다른 dns서버로 이송한다.

 dns는 ip라우팅 체계와 비슷한 구조를 가지고 있다. 이름 확인을 요청하는 컴퓨터는 요청에서 도메인 이름을 확인 할 수 있는 dns 서버가 발견될때까지 계층위로 리디렉션 된다. 모식도 6은 이 계층의 일부를 표현한다. 이 트리의 최상층에는 루트 도메인이 존재한다. 더 흔하고, 오래된 도메인일 수록 상층 근처에서 발견된다. 위의 모식도에서 그려지진 않았으나 전세계에 걸친 다수의 dns서버가 이 계층의 나머지 부분을 구성하고 있다. 

 인터넷 연결이 설정될때 (lan이나 윈도우의 원격 네트워크 등) 하나의 주요한 dns 서버 혹은 하나에서 수 많은 보조 dns서버들이 설치의 일부로서 구체화 된다. 이런식으로 도메인 이름 확인이 필요한 모든 인터넷 어플리케이션들이 제대로 작동할 수 있게 된다. 예를들어 웹주소를 웹 브라우저에 치거나 주요 dns서버에 브라우저가 처음 연결될때 말이다. 당신이 친 도메인 이름을 위한 아이피 주소를 획득한 뒤, 부라우저는 목표 컴퓨터에연결하고 당신이 원하는 페이지를 요청할 수 있다.

 -확인해보기. 윈도우에서 dns끄기.
만약 당신이 윈도우 95를 사용하고 인터넷에 접속할때, dns서버의 주소를 보이게 하거나 심지어 안보이게 할 수도 있다.

 만약 다이얼 업 방식의 네트워크를 쓰고있다면, 다이얼 업 네트워크 창을 띄워라(시디롬 드라이브 믿의 윈도우 익스플로러 밑이나 네트워크 이웃 위에서 찾을 수 있다) 그리고 인터넷 연결에 오른쪽 클릭한뒤 properties를 클릭한다. 윈도우 연결속성의 밑 부분에서 tcp/ip 설정 버튼을 클릭해라.

 만약 영구 연결 인터넷을 쑤고 있다면
네트워크 이웃에 오른쪽 클릭한뒤 설정을 눌러라. 그리고 tcp ip 설정을 눌러라. 그리고 최상단의 dns 설정 탭을 눌러라.

이제 dns서버의 아이피 주소를 볼 수 있을 것이다. 여기서 dns를 비활성화 하던가 아니면 0.0.0.0.으로 설정할 수 있다.(당신 dns서버의 아이피 주소를 먼저 적어라. 아마 컴퓨터를 재시작 해야할 것이다) 이제 웹 브라우저에 주소를 적어봐라. 브라우저는 도메인 이름 확인을 할 수없을 것이고 당신은 아마 dns 서버를 찾을 수 없다는 짜증나는 대화 상자를 얻을 것이다. 하지만 만약 도메인 이름 대신 상응하는 ip주소를 이곳에 입력하게 된다면. 브라우저는 원했던 웹페이지를 보여줄 수 있을 것이다.(dns를 끄기전에 ip주소를 얻기 위해 핑을 사용하자) 다른 마소 운영체제 시스템도 비슷할 것이다.

8. 인터넷 프로토콜을 다시 한번 살펴보자. Internet protocols revisited

프로토콜 스택에서 얼핏 느꼈겠지만 인터넷에서 사용되는 프로토콜은 상당히 많다.
인터넷이 기능하기 위해 많은 통신 프로토콜이 필요하다는 것은 정말로 사실이다. 여기에는 tcp ip 프로토콜, 라우팅 프로토콜 medium access control protocol, application level protocol 등이 포함된다. 다음 섹션에서는 인터넷상에서 더 중요하거나 일반적으로 사용되는 프로토콜들중 일부를 다루고 있다. 고수준 프로토콜에 대한 설명에서 저수준 프로토콜에 대한 설명으로 진행할 것이다.

8-1. http와 월드와이드 웹: 응용프로토콜 (application protocols)
 
 인터넷에서 가장 흔하게 사용되는 서비스는 World Wide Web(WWW)이다. HTTP(hypertext transfer protocol)은 웹이 작동하도록 하는 응용프로그램 프로토콜이다. HTML과 헷갈리지 않도록 하자 ^^. html은 웹페이지를 적는데 사용되는 언어이다. HTTP는 웹 브라우저들과 웹 서버등이 인터넷 위에서 상호 통신하기 위해 사용되는 프로토콜이다. 프로토콜스택 tcp계층의 위에 있고 다른 누군가에게 대화하기 위해 사용되는 프로토콜로서, 응용프로그램층계의 프로토콜이라 할 수 있다. 이때 이 것을 사용하는 어플리 케이션들로는 웹브라우저와 웹서버등이 있겠다.

 http는 무연결 텍스트기반 프로토콜이다. 웹브라우저등을 위시한 클라이언트 들은 웹서버에게 웹페이지와 이미지등의 웹요소를 요청하고, 요청이 서버에의해 서비스 된다음 클라이언트와 서버간 연결은 끊어진다. 새로운 연결은 각 요청마다 만들어져야 한다. 대부분의 프로토콜들은 연결 지향적이다. 이것은 서로 대화하는 두개의 컴퓨터들이 서로간의 연결을 지속적으로 열어두며 통신한다는 것을 의미한다. 하지만 http는 는 그렇지 않다. 클라이언트에 의해 http요청이 만들어지기 전에, 서버에 새로운 연결이 만들어져야 한다.
당신이 웹 브라우저에 url을 입력할때 일어나는 것은 다음과 같다.

 -1 만약 url이 도메인 네임을 포함하고 있다면, 브라우저는 dns에 처음 연결하고, 웹서버를 위해 상응하는 ip주소를 검색해온다.
 -2 웹 브라우저가 웹서버에 연결하고 원하는 웹페이지를 위해 http요청(프로토콜 스택을 통해)을 보낸다.
 -3 웹서버는 요청을 받고, 원하는 페이지를 확인한다. 만약 페이지가 존재한다면 웹서버는 그것을 보낸다. 만약 요청된 페이지를 웹서버가 찾을 
    수 없다면 http 404에러 메시지를 보낸다.(404는 웹서핑을 해본사람이라면 모두 알듯이 '페이지 찾을 수 없음'을 의미한다)
 -4 웹 브라우저는 페이지를 돌려 받고 연결은 끊어지게 된다.
 -5 브라우저는 페이지를 통해 분석하고 웹페이지를 완성하기 위한 다른 페이지 요소들을 찾는다. 이것들은 대부분 이미지와 애플릿등을 포함한다.
 -6 각 필요한 요소들에 대해 브라우저는 추가적 연결을 만들고 웹서버에 각 요소들에 대한 http요청들을 만든다.
 -7 브라우저가 모든 이미지등과 애플릿등을 다 로드하면, 페이지는 브라우저 창에서 완벽하게 로드되게 된다.

 - 더 알아보세요~ http를 이용하는 웹페이지를 검색하기위해 텔넷 클라이언트 사용하기

 텔넷은 인터넷에서 사용되는 원격 터미널 서비스 이다. 최근에는 그 사용이 줄어들고 있지만 인터넷을 공부하기에는 여전히 매우 유용한 도구이다. 윈도우에서 디폴트 텔넷 프로그램을 찾아봐라. 아마 telnet.exe라는 이름으로 windows디렉토리 안에 위치하고 있을 것이다. 연 다음 터미널 메뉴를 내리고 설정에 들어가보자. 설정창에서 local echo를 체크해보자(이렇게 함으로서 입력했을때 http 요청을 볼 수 있게 된다). 이제 연결 매뉴를 내려 원격 시스템을 선택한다. 그리고 호스트네임에 www.google.com을 포트번호에 80을 입력한다.(웹서버는 대게 디폴트로 포트 80에서 수신한다) 연결을 누르고. GET / HTTP/1.0을 타입한다음 엔터를 두번 눌러보자. 이건 그 웹서버에 루트페이지에 대해 보내는 간단한 http 요청이다. 웹패이지가 깜빡인다음, 연결이 종료됐다는 대화상자가 나올 것이다. 만약 당신이 검색된 페이지를 저장하고 싶다면 텔넷 프로그램에서 로깅 기능을 킨다. 이후 웹페이지를 탐색한다면 웹페이지를 작성하는데 사용된 html을 볼 수 있을 것이다.

대부분의 인터넷 프로토콜은 request for comments(RFC)라고 알려진 인터넷 문서로 구체화 된다. rfc는 인터넷의 몇몇 부분에서 발견될 수 있을 것이다. 아래의 리소스 섹션에서 이 링크를 찾을 수 있을 것이다. http버전 1.0은 rfc 1945에 의해 구체화 된다.

8-2 smtp와 electronic mail: 응용프로그램 프로토콜


 또달리 흔히 사용되는 인터넷 서비스는 전자 메일이다. 이메일은 SMTP(simple maile tràner protocol)이라고 불리는 응용프로그램 단위의 프로토콜을 사용한다. smtp는 텍스트 기반 프로토콜이다. 하지만 http와 다르게 smtp는 연결 지향적이다. Smtp http보다 훨씬 복잡하다. smtp에는 http보다 훨씬 많은 명령어들과 고려사항이 존재한다.

 메일 클라이언트를 열고 당신의 이메일을 읽을때 일반적으로 일어나는 일들이다.
 1.메일 클라이언트(넷스케이프의 mail, lotus의 notes,microsoft의 outlook.등)는 디폴트 메일서버에 연결한다.
 2.메일 서버는 항상 그 자신의 신원을 확인할 수 있게 첫번쨰 메시지를 보낸다.
 3.클라이언트는 SMTP HELO 명령어를 보낼 것이고 서버는 250 OK 메시지로 응답할 것이다.
 4.클라이언트가 메일을 확인하는지, 보내는지 등에 따라 적절한 smtp명령어가 서버로 보내질 것이고, 그에따른 응답을 받을 것이다.
 5.이 요청/반응 과정은 클라이언트가 smtp quit 커맨드를 보내기 전까지 계속 될 것이고, 보내진다면 웹서버가 작별인사 한뒤 연결이
   닫히게 될 것이다.

 Smtp 서버와 클라이언트간의 대화가 아래에 나와 있다. R:은 서버(혹은 수신자)측에서 보낸 메시지를 나타내고 S:는 클라이언트(송신자)측에서 보낸 메시지를 나타낸다.

      This SMTP example shows mail sent by Smith at host USC-ISIF, to
      Jones, Green, and Brown at host BBN-UNIX.  Here we assume that
      host USC-ISIF contacts host BBN-UNIX directly.  The mail is
      accepted for Jones and Brown.  Green does not have a mailbox at
      host BBN-UNIX.

      -------------------------------------------------------------

         R: 220 BBN-UNIX.ARPA Simple Mail Transfer Service Ready
         S: HELO USC-ISIF.ARPA
         R: 250 BBN-UNIX.ARPA

         S: MAIL FROM:<Smith@USC-ISIF.ARPA>
         R: 250 OK

         S: RCPT TO:<Jones@BBN-UNIX.ARPA>
         R: 250 OK

         S: RCPT TO:<Green@BBN-UNIX.ARPA>
         R: 550 No such user here

         S: RCPT TO:<Brown@BBN-UNIX.ARPA>
         R: 250 OK

         S: DATA
         R: 354 Start mail input; end with <CRLF>.<CRLF>
         S: Blah blah blah...
         S: ...etc. etc. etc.
         S: .
         R: 250 OK

         S: QUIT
         R: 221 BBN-UNIX.ARPA Service closing transmission channel

 이 과정은 SMTP를 명세한 RFC821 에서 수행되었다.

8-3 전송제어 프로토콜 (Transmission Control Protocol)

 프로토콜 스택에서 응용프로그램 계층 아래에 있다. 응용 프로그램이 다른 컴퓨터로 연결을 연다면 그들이 보내는 메시지들은 스택 밑으로 내려가 tcp계층으로 보내질 것이다. tcp는 응용프로그램 프로토콜을 올바른 응용프로그램이나 목표 컴퓨터로 라우팅 할 책임이 있다. 이것을 달성하기 위해 포트넘버가 사용된다. 포트는 각 컴퓨터의 분리된 채널이라고 생각하면 된다. 예를들어 당신은 웹서핑을 하는 도중 이메일을 읽을 수 있는데, 이것은 이 두 응용프로그램이(웹브라우저와 메일클라이언트)가 다른 포트넘버를 사용하고 있기 때문이다. 패킷이 컴퓨터에 도착하고 프로토콜 스택을 거슬러 올라갈때 tcp계층은 어떤 응용프로그램이 패킷을 수신할 것인지 포트 번호에 기초해 결정한다.

  tcp의 작동원리는 다음과 같다.
 
   Tcp층이 상방에서 응용프로그램 프로토콜의 데이터를 받을때, 정보를 관리 하기 용이한 덩어리들로 분할하고 tcp헤더와 함께 구채적인 tcp   
  정보들을 각 덩어리에 추가한다. tcp헤더에 포함된 정보는 데이터가 수신돼야 할 응용프로그램의 포트번호를 포함한다.

   만약 tcp층에서 하방의 ip층으로부터 패킷을 받는다면 tcp층은 패킷으로부터 tcp헤더 데이타를 제거하고 필요하다면 데이터 재건을 한다.     
  그 이후는 tcp헤더에서 가져온 포트번호에 해당하는 알맞은 응용프로그램으로 데이터를 보낸다.

 tcp가 프로토클 스택을 통과해 올바른 응용프로그램으로 정보를 보내는 과정은 상기와 같다.

 tcp는 문자적 프로토콜이 아니다. tcp는 연결 지향적이고, 신뢰성 있으며, 바이트 스트림 서비스이다. 연결 지향이라는 의미는 tcp를 사용하는 두 응용프로그램이 데이터 교환에 있어 반드시 연결되어야 한다는 것을 말한다. 신뢰성 있다는 것은 수신된 모든 패킷에 대해 송신측에 전달 내용을 확실히 하기위한 승인요청이 보내진다는 것을 말한다. tcp는 헤더에 수신된 데이터의 에러를 체크하기위한 체크섬을 포함한다. Tcp 헤더는 다음과 같이 생겼다.

 tcp헤더에 ip주소를 위한 공간이 없다는 것을 주목하자. 이것은 tcp가 ip주소에 대해 아무것도 모르기 때문이다. Tcp의 역할은 어플리케이션에서 어플리케이션 사이의 정보를 신뢰성있게 받는 것이다.  컴퓨터에서 컴퓨터간 자료획득은 ip의 일이다.

 -더 알아보세요 잘알려진 인터넷 포트넘버들.

 주로 사용되는 인터넷 서비스의 포트번호이다.
 ftp 20/21
 Telnet 23
 Smtp 25
 http 80
 Quake III arena 27960 (슈팅게임 ㅋ)

8-4 인터넷 프로토콜 (internet Protocol)

 Tcp와 다르게 ip는 신뢰할 수 없으며 무연결 프로토콜이다. ip는 패킷이 목적지에 도착하든 말든 신경쓰지 않으며, ip는 연결과 포트넘버들에 알지도 못한다. ip의 역할은 다른 컴퓨터에 패킷을 보내거나 경로를 지정해주는 것이다. ip패킷들은 독립적인 개체들이라고 할 수 있으며, 질서없이 도착할 수도, 아에 도착하지조차 않을 수 있다. 패킷이 올바른 순서로 도착하는 것을 확실하게 하는 것은 tcp의 역할이다. tcp와 ip의 공통점은 데이터를 받는 방식과 tcp데이터 위에 ip헤더 정보가 뒤쓰인다는 것 밖에 없다.

 위의 모식도 8에서 우리는 ip헤더에 들어가 있는 송수신측 컴퓨터들의 ip주소를 볼 수 있다. 아래 모식도9는 응용프로그램 계층 tcp계층, ip 계층을 지난 패킷이 어떻게 생겼는지 볼 수 있다. 어플리케이션 층의 데이터는 tcp층에서 분할돼 tcp헤더가 더해졌고 이는 ip 계층으로 진행해 ip헤더가 추가 됐다. 그리고 패킷은 인터넷을 가로질러 전송되게 된다.

9. Wrap up 마무리

이제 인터넷이 어떻게 동작하는지 알게 되었다. 하지만 이 방식이 언제까지 지속될까? 현재 인터넷에서 사용되는 ip버전인 4는 오직 2^32만큼의 주소만 사용 가능하다. 결국에는 어떤 ip주소도 남지 않게 될 것이다. 하지만 걱정 말자. ipv6가 현재 연구기관과 회사의 협력체들에의해 백본에서 테스트 되고 있다. 그리고 ipv6이후? 누가 알 수 있을까. 인터넷은 국방부의 연구프로잭트로서 개시한 이후로 기나긴 길을 달려왔다. 하지만 하나는 확실 할 것 같다. 인터넷은 다른 메커니즘이 이제껏 해오지 못한 방식대로 세상을 통합할 것이다. 정보시대는 현재 계속해서 빠른 속력으로 진행되고 있으며 나는 그 일부가 될 수 있어 기쁘다.

10. 참고문헌

아래 책들은 매우 중요한 자원이며 이 문서를 쓰는데 엄청난 도움을 줬다. 난 스티븐의 책이 tcp ip에대한 최고의 참고서적이라고 생각하며 어쩌면 인터넷의 성경과 같은 책이라고 생각한다. sheldon의 책은 매우 넓은 범위를 다루며 네트워크 정보에 대한 매우 방대한 량을 포함하고 있다.

TCP/IP Illustrated, Volume 1, The Protocols. 
W. Richard Stevens. 
Addison-Wesley, Reading, Massachusetts. 1994.
Encyclopedia of Networking. 
Tom Sheldon. 
Osbourne McGraw-Hill, New York. 1998.

비록 이책을 쓰는데 사용되지는 않았지만 여기 인터넷과 네트워킹이라는 주제에 매우 좋은 책들이 있다.

Firewalls and Internet Security; Repelling the Wiley Hacker. 
William R. Cheswick, Steven M. Bellovin. 
Addison-Wesley, Reading, Massachusetts. 1994.
Data Communications, Computer Networks and Open Systems. Fourth Edition. 
Fred Halsall. 
Addison-Wesley, Harlow, England. 1996.
Telecommunications: Protocols and Design. 
John D. Spragins with Joseph L. Hammond and Krzysztof Pawlikowski. 
Addison-Wesley, Reading, Massachusetts. 1992.