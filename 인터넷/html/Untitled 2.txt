전공 면접 1..


1. 운영체제 란? (Operating systems)

하드웨어 자원들을 관리하는 프로그램들의 집합.
응용프로그램들을 위한 시스템 서비스 제공자,.
하드웨어와 응용 프로그램들을 이어주는 연결부.

운영체제의 서비스에 접근하기 위한 인터페이스는 ~를 통해 제공된다.

2. 시스템 콜.

시스템 콜이란?

실행되는 운영체제의 커널단에서 요청되는 컴퓨터 프로그램 요청.
하드웨어연관 서비스를 포함할 수도 있고, 세로운 프로세스 실행과 창조를 포함할 수도 있다.
프로세스 스케줄링과 같은 통합 커널 서비스단과 통신하며. 이 프로세스와 운영체제간 상호 인터페이스를 제공한다.

programmatic way in which a computer program requests a service from the kernel of the operating system on which it is executed
This may include hardware-related services, creation and execution of new processes
Communication with integral kernel services such as process scheduling. It provide an essential
Inter face between a process and operating system.

3. 커널이란?
운영체제의 핵심을 구성하는 프로그램이다.
부팅하는동안 메모리를 로드하는 운영체제의 첫부분이다.
컴퓨터의 전체 세션동안 메모리에 남아있다.
운영체제의 핵심부분으로 운영체제에 다양한 서비스를 지원하기 위해 상호작용이 되어야 하므로 지속적으로 읽어들일 수 있어야 한다.
다만 커널은 강력한 권한을 가지기 떄문에 보안을 위해 응용프로그램이 접근할 수 없는 메모리 영역에서 보호된다.
e.g. example gratia.

Os코어부의 프로그램이며 일반적으로 시스템 모든 부분에서 완전한 통제권을 가지고 있다. 메모리에 상주하는 운영체제 코드이다.
하드웨어와 응용프로그램간의 상호작용 촉진. 아이오, 메모리, 크립토그라피와 같은 모든 하드웨어 자원을 통제한다. 디바이스 드라이버를 통해
. 프로세스간의 자원충돌같은 부분에서 중재한다. 그리고 씨피유와 캐시이용, 네트워크 소켓 파일시스템과 같은 일반 자원 이용을 최적하한다 . 대부분의 시스템에서, 커널은 스타트업(부트로더 다음)에 적재되는 첫번쨰 프로그램이다. 스타트업은 부팅을 뜻하는 단어인듯?
peripheral - 정보 IO를 위해 사용되는 장치.
커널은 그다음의 모든 부팅. 뿐 아니라 메모리, 페리퍼럴즈, 소프트웨어의 인아웃풋 요청그리고 이것들을 씨피유를 위한 데이터 처리명령으로의 번역하는 역할을 한다. 


The kernel is a computer program at the core of a computer's operating system and generally has complete control over everything in the system.[1] It is the portion of the operating system code that is always resident in memory,[2] and facilitates interactions between hardware and software components. A full kernel controls all hardware resources (e.g. I/O, memory, cryptography) via device drivers, arbitrates conflicts between processes concerning such resources, and optimizes the utilization of common resources e.g. CPU & cache usage, file systems, and network sockets. On most systems, the kernel is one of the first programs loaded on startup (after the bootloader). It handles the rest of startup as well as memory, peripherals, and input/output (I/O) requests from software, translating them into data-processing instructions for the central processing unit.
The critical code of the kernel is usually loaded into a separate area of memory, which is protected from access by application software or other less critical parts of the operating system. The kernel performs its tasks, such as running processes, managing hardware devices such as the hard disk, and handling interrupts, in this protected kernel space. In contrast, application programs such as browsers, word processors, or audio or video players use a separate area of memory, user space. This separation prevents user data and kernel data from interfering with each other and causing instability and slowness,[1] as well as preventing malfunctioning applications from affecting other applications or crashing the entire operating system. Even in systems where the kernel is included in application address spaces, memory protection is used to prevent unauthorized applications from modifying the kernel.
The kernel's interface is a low-level abstraction layer. When a process requests a service from the kernel, it must invoke a system call, usually through a wrapper function.
There are different kernel architecture designs. Monolithic kernels run entirely in a single address space with the CPU executing in supervisor mode, mainly for speed. Microkernels run most but not all of their services in user space,[3] like user processes do, mainly for resilience and modularity.[4] MINIX 3 is a notable example of microkernel design. Instead, the Linux kernel is monolithic, although it is also modular, for it can insert and remove loadable kernel modules at runtime.
This central component of a computer system is responsible for executing programs. The kernel takes responsibility for deciding at any time which of the many running programs should be allocated to the processor or processors.

4. 운영체제에 의해 처리되는 에러는?

전력문제. 프린터 용지 부족, 네트워크 연결 실패등이 해당한다. 운영체제가 불러와진 뒤 모든 환경은 운영체제의 관리 하에 있다 볼 수 있다. 이는 소프트웨어 뿐만 아니라 주변기기를 포함한 하드웨어도 해당한다. 따라서 전력공급기의 전력 불안정, 프린터의 인쇄 완료 또는 용지 부족등도 이에 해당한다 할 수 있다.

5.명령 해석기의 주요 기능?

운영체제에서 파일등을 처리하기 위함. bash( unix의 쉘), z shell등

Blanket term.( 포괄하는 용어)
implementing 구현하다. 실행하다.


6.운영체제의 자원은 시공간 분할 멀티플렉싱으로 관리되어 진다.
시분할 멀티플렉싱: 싱글코어 프로세서 상에서의 다중 프로그래밍 (time division multiplexing)

다중 프로그래밍. 시피유 작업과 입출력 작업을 병행하는 것. 시피유 이용과 처리량을 향상 시킬 수 있다. Space division.

공간분할멀티플렉싱: 메모리 또는 디스크, 하드웨어 자원을 여러 프로세스 또는 유저가 사용할 수 있도록 공간적으로 분리하는 것. Space division.

telephony 전화 통화 방법
Is credited 인정받다
멀티플렉싱이란. having many folds

7.프로세스가 실패했을때 대부분의 운영체제는 에러 정보를 로그 파일에 기록한다.

에러 로그는 프로세스가 비정상적으로 종료되어도 확인할 수 있어야하므로 비휘발성인 저장소에 파일로 기록되는게 일반적입니다. 구현에 따라 추가적으로 네트워크를 통해 원격 저장소에 저장하기도 합니다.

8. 실시간 운영체제 인 것들.

VxWorks

VxWorks is a real-time operating system (or RTOS) developed as proprietary software by Wind River Systems, a wholly owned subsidiary of Aptiv. First released in 1987, VxWorks is designed for use in embedded systems requiring real-time, deterministic performance and, in many cases, safety and security certification, for industries, such as aerospace and defense, medical devices, industrial equipment, robotics, energy, transportation, network infrastructure, automotive, and consumer electronics.[1]
VxWorks supports AMD/Intel architecture, POWER architecture, ARM architectures[2] and RISC-V.[3] The RTOS can be used in multicore asymmetric multiprocessing (AMP), symmetric multiprocessing (SMP), and mixed modes[4] and multi-OS (via Type 1 hypervisor)[5] designs on 32- and 64-bit processors.[6]
VxWorks comes with the kernel, middleware, board support packages, Wind River Workbench development suite and complementary third-party software and hardware technologies. In its latest release, VxWorks 7, the RTOS has been re-engineered for modularity and upgradeability so the OS kernel is separate from middleware, applications and other packages.[7] Scalability, security, safety, connectivity, and graphics have been improved to address Internet of Things (IoT) needs.[8][9][10]

Windows ce

Windows Embedded Compact,[6] formerly Windows Embedded CE, Windows Powered and Windows CE, is an operating system subfamily developed by Microsoft as part of its Windows Embedded family of products.
Its mainstream support ended in 2018, and "extended support" will end in 2023.[7]
Unlike Windows Embedded Standard, which is based on Windows NT, Windows Embedded Compact uses a different hybrid kernel.[8] Microsoft licenses it to original equipment manufacturers (OEMs), who can modify and create their own user interfaces and experiences, with Windows Embedded Compact providing the technical foundation to do so. The current version of Windows Embedded Compact supports x86 and ARM processors with board support package (BSP) directly.[9] The MIPS and SHx architectures had support prior to version 7.0. 7.0 still works on MIPSII architecture.
Originally, Windows CE was designed for minimalistic and small computers. However CE had its own kernel whereas those such as Windows XP Embedded are based on NT. Windows CE was a modular/componentized operating system that served as the foundation of several classes of devices such as Handheld PC, Pocket PC, Auto PC, Windows Mobile, Windows Phone 7 and more.

Rtlinux

RTLinux is a hard realtime real-time operating system (RTOS) microkernel that runs the entire Linux operating system as a fully preemptive process. The hard real-time property makes it possible to control robots, data acquisition systems, manufacturing plants, and other time-sensitive instruments and machines from RTLinux applications. The design was patented.[1] Despite the similar name, it is not related to the Real-Time Linux project of the Linux Foundation.[2]
RTLinux was developed by Victor Yodaiken, Michael Barabanov, Cort Dougan and others at the New Mexico Institute of Mining and Technology and then as a commercial product at FSMLabs. Wind River Systems acquired FSMLabs embedded technology in February 2007 and made a version available as Wind River Real-Time Core for Wind River Linux. As of August 2011, Wind River has discontinued the Wind River Real-Time Core product line, effectively ending commercial support for the RTLinux product.

Palm os

96년도에 출시된 pda 및 모바일용 운영체제로 터치스크린 gui를 위해 개발되었고 실시간 운영체제는 아니다.

