HTTP Crash Course & Exploration
Src=https://www.youtube.com/watch?v=iYM2zFP3Zn0

 이 영상은 devmountain에 의해 지원 되었다. 만약 웹 개발, iOS ,ux디자인에 관심이 있다면 devmountain은 당신이 정규직으로 이 산업에서 일할 수 있는 걸 목표로하는  12주과정의 설계 개발 부트캠프이다. 더 배우고 싶다면 devmountain.com에 방문하거나 아래설명에 있는 링크를 클릭해라. 이비디오에서 나는 평소 충분히 잘 이야기 되지 않는 것에 대해 이야기 해볼 것이다. http프로토콜 말이다. 우리가 웹개발자로서 항상 함께 일하는 것이다. 그리고 너가 백엔드든 풀스택이든 아니면 프론트엔드든 http와 전체적 요청응답 사이클을 이해하는 것은 매우 중요하다. 그래서 이 비디오에서는 어떻게 이것이 작동하는 지와 우리는 다른 유형의 응답들을 알아볼 것이다. 메소드, 상태코드, 당신이 요청을 할떄 서버로부터 되돌려 받는 것들 그리고 우리는 조금의 슬라이드들을 겪을 것이고, 나는 이 일부를 노드.js와 express를 포스트맨(http클라이언트이다)과 함꼐 테스트 해볼 것이다. 그리고 나는 익스프레스가 당신에게 http가 어떻게 작동할 것인지 예를 주는 훌륭한 프레임 워크라고 생각한다. 왜냐하면 이건 모든 것을 스스로 다뤄보고 미니멀하며, 우리는 그걸 고수준 프레임워크에서 그러는 것처럼 추상화한다기보다는 요청과 응답을 직접 다룬다. 그래서 만약 너가 익스프레스나 노드와 친숙하지 않더라도, 괜찮다. 우리는 특정한 프레임 워크나 언어에 집중하는 것이 아니다.

 그래서 이제 http가 무엇인지 이야기 해보자. http는 hyper text transfer protocol 로서 기본적으로 웹서버와 클라이언트간 통신을 담당한다. 이건 웹 프로토콜이다. 그래서 웹브라우저나 웹페이지에 방문, 폼을 제출하거나, 일종의 에이젝스응답를 보내는 버튼을 클릭하거나, 그런 응답을 가져오는 매순간마다, 당신은 http를 사용할 것이고 응답과 반응 사이클이라고 불리는 것들을 겪을 것이다. 당신은 요청을 보내고 헤더나 본문이라고 불리는 응답을 되돌려 받는다. 이제 이 사이클을 좀 더 자세히 들여다볼 것이다.

 Http가 무상태라는 것을 이해하는 것은 매우 중요하다. 무상태는 모든 요청이 완벽하게 독립적이라는 것을 의미한다. 당신이 웹페이지를 방문하는 하나의 요청을 만들거나, 이후에 다른 페이지로 갈때, 페이지를 리로드할떄든 이전의 트랜잭션에 대해 아무것도 기억하지 않는다. 각각의 트랜잭션을 하나의 트랜잭션으로만 바라본다. 우리가 예를들어 로그인 데이타를 유지하고 더 강화된 유저 체험(프로그래밍, 로컬 저장, 쿠키, 세션 등과 같은 것)들을 제공하기 위해 위해 이용할 수 있는 다른 것도 있다. 
하지만 http의 핵심에는 단지 무상태가 있다는 것을 알아라.

 그래서 https 란 무엇인가? 나는 많은 사람들이 이것에 대해 알 것이라고 생각한다. 하지만 이건 그렇지 않은 사람들을 위한 것이다. https는 hyper text transfer protocol secure 의 약자로 ssl(secure socket layer)이나 tls(transport security layer) 이라고 불리는 무언가에 의해 암호화 딘다
그래서 당신이 무언가 민감한 정보를 보내는 사용자를 가지고 있다면 언제나 https를 통해야한다. 특히 그게 만약 신용카드 정보나 개인 주민번호 라면 그런 것들에 높은 수준의 보안성을 가지고 싶을 것이다. 그리고 심지어 컨택폼 같은 것도 당신은 https를 갖어야 한다. 많은 웹사이트들과 어플리케이션들은 현재 그냥 https를 각 페이지 별로강제로하는 수준인데, 이건 나쁜 아이디어는 아니다. 이것은 웹호스트에 ssl 인증서를 설치한다거나 함으로서 사용할 수 있다. 그리고 다른 수준의 보안과 다른 수준의 인증서 또한 존재한다. 그래서 요청이 서버에대해 이루어질때, 첨부할 메소드들이 존재한다. 그리고 이것보다도 많은 것들이 존재한다. 이것은 일할떄 사용하는 주요한 4가지이고 이제 알아보려고한다. 더 많은 것들이 있다는 걸 알고는 있어라. 

 get요청은 서버로부터 데이터를 얻거나 가져오고 싶을떄 사용한다. 그냥 표준 html페이지를 로딩하고 싶어할 떄일 수도 있고, css나 json, 이미지, xml데이터 등을 같은 자산을 가져오고 싶을떄일 수도 있다. 그래서 웹페이지를 방문하는 매순간 당신은 http를 통해 겟 요청을 서버에 한다.
 post요청은 데이터를 포스팅하고 있을때, 서버에 무언가를 추가하고 있을떄, 리소스를 추가할때 쓰인다. 일반적으로 폼을 제출 할때 (컨택 폼이라고 하자) 아마 포스트 요청을 할 것이다. 만약 블로그를 만들어 블로그 포스트 같은걸 제출하고 있다면 그건 포스트 요청이 될 것이다. 당신은 데이터를 서버에 보내고 있으며 일반적으로 어딘가의 데이터 베이스에 저장된다. 또한 당신은 get요청을 하는 폼을 가질 수도 있다. 하지만 이것은 덜 보안적이다. 왜냐하면 양식에서 보내려고 하는 것이 실상 url에서 보일 것이다. 그래서 일반적으로 당신이하는 모든 것들이 데이터를 필터링하는 것인 일종의 검색 폼이 아닌 이상 겟요청을 폼을 사용해 하고 싶어하지는 않을 것이다. 
이것은 서버로부터 되돌아 오는 것이고 당신은 실제로 아무것도 포스팅 하고 있는 것이 아니다.

 그다음에는 put요청이 있다. 이것은 이미 서버에 존재하는 데이터를 업데이트 하는데 사용된다. 만약 블로그 포스트를 가지고 있고 이미지를 바꾼다거나 텍스트를 바꾼다거나 이걸 편집하고 싶다면 일반적으로 put요청으로 할 것이다. 그리고 삭제 요청은 물론 그냥 서버로부터의 데이터를 삭제한다. 그래서 http를 사용한 각 요청, 반응과 함께 헤더라고 불리는 것들과 바디라고 불리는 것들을 갖게 될 것이다. 일반적으로 응답으로서 바디는 당신이 로드하려고 하는 html페이지가 될 것이고 json데이터를 로드하기위해 서버로부터 송신된 것이 무엇이든간에, 그리고 당신이 요청을 보낼때 당신은 요청 바디를 보낼 수도 있다. 예를들어 폼을 제출할때 당신이 제출하려는 폼은 요청 바디의 일부이다. 이제 헤더와 관한다면 아마 리퀘스트 헤더를 가질 것이고, a general 헤더라는 것을 가질 것이다. 그래서 본질적으로 세부분으로 나뉘며, 각 세부분에는 다른 필드들이 존재한다. 그래서 일반적으로 헤더는 이렇게 보일 것이고. 당신은 get요청과 같은 메소드를 프로토콜과 함께 경로와 url에 할것이다. 이경우에는 /1.1이다. 그리고 당신은 이 모든 다른 헤더필드들을 가질 것이다. 그리고 이 대부분들은 당신은 아마 신경쓸 필요가 없을 것이다. 하지만  어떤게 더 흔하고 어떤게 특히 일반적인지 알면 좋다. 그래서 일반적으로 우리는 꽤 직접적인 요청 url(그냥 우리가 요청하는 url이다)을 가진다. 요청 메소드는 겟 요청 