How browsers work. - 현대 웹브라우저의 뒷면 Aug 5, 2011 Tali Garsiel, Paul Irish
Src = https://web.dev/howbrowserswork/
 
1. 서문

 이 webkit과 gecko의 내부 작동에 대한 종합적 입문서는 이스라엘인 개발자인 탈리 가르시엘에 의해 수행된 연구들의 결과이다. 수년동안 그녀는 내부 브라우저에 대한 모든 공개된 데이터들을 리부했고, 웹브라우저 소스코드를 읽는데 많은 시간들을 보냈다. 그녀는 적었다.

 ie가 90퍼센트를 지배할때 크게 할 수 있는 것은 없었으며, 브라우저를 그냥 블랙박스 정도로 여겼다. 그러나 이제 50퍼센트를 넘는 점유율을 가진 오픈소스 브라우저들과 함께  그내부 실상을 들여다보고 웹바라우저 안에 무엇이 있는지 확인하기 좋은 시간이다. 글쎄, 그 안에 있는건 수백만줄의 씨쁠쁠 라인일 것이다.

 탈리는 그녀의 사이트에그녀의 연구를 공개했다, 하지만 우리는 그게 더 많은 독자들이 봐야한다는 것을 알고 있고, 우리는 여기에 정리해 재공개했다.

 웹 개발자로서 브라우저 작동 내부를 배우는 것은 더 나은 결정을 하는것을 돕고, 모범계발 사례뒤의 그 타당함을 알게해준다. 이게 비록 긴 문서이긴 하지만, 이걸 깊게 파보는 것을 추천한다. 우리는 당신이 한일을 당신이 기뻐할 것이라고 보장한다.

2. 도입

 웹브라우저는 가장 널리 쓰이는 소프트웨어이다. 이 입문서에서 나는 그 뒷면에서 어떻게 작동하는지 설명할 것이다. 우리는 당신이 주소창에 google.com을 칠때 브라우저 화면의 구글페이지를 보기전까지 어떤일이 일어나는지 탐구해볼것이다

3. 우리가 이야기해볼 브라우저들

 현재 데스크탑상에서 사용되는 5가지의 메인 브라우저들이 있다:chrome, IE, Firefox, safari, opera. 모바일 상에서 주요 브라우저는 안드로이드 브라우저, 아이폰 오페라 미니, 오페라 모바일, uc브라우저, 노키아 s40/s60브라우저. 크롬 등이 있다. 이러한 것들은 오페라 브라우저만 제외하고 webkit에 기초를 두고 있다. 나는 오픈소스 브라우저인 파이어폭스나 크롬, 사파리(부분적으로 오픈소스임)로부터 예를 제시해줄 것이다. Statcounter statistics에 따르면(2013 6월) 크롬과 파이어폭스 그리고 사파리는 대략 전세계 데스크탑 브라우저 사용의 71을 차지했다. 모바일에서 안드로이드 브라우저, 아이폰, 크롬은 대략 54퍼센트의 사용을 구성했다. 

4. 브라우저의 주요 기능

브라우저의 주요기능은 당신이 선택한 웹 자원을 보여주는 것이다, 서버에서 요청하고, 브라우저창을 통해 보여줌으로서. 자원은 보통 html문서이며 pdf, 이미지. 다른 콘텐츠 타입이 될 수도 있다. 리소스의 위치는 URI(uniform resource identifier)를 사용하는 사용자에 의해 구체화된다.

 브라우저가 html파일을 번역하고 보여주는 방식은 html과 css명세에서 잘 구체화 돼 있다. 이 명세는  웹을 위한 표준 기구인 w3c(World Wide Web consortium)기구에 의해 유지된다. 수년동안 브라우저는 오직 일부의 명세만을 준수하며 그들 고유의 확장자를 개발했다. 이것은 웹 작성자에 심각한 호완성 문제를 일으켰다. 오늘날 대부분의 브라우저는 더, 그리고 덜 명세를 준수한다.

 브라우저 유저 인터페이스는 서로 공통점이 많다. 유저 인터페이스 요소는 다음과 같다.

 1 uri를 넣을 수 있는 주소바.
 2 앞, 뒤로가기 버튼
 3 북마킹
 4 새로고침과 현문서 로딩을 멈출때 사용하는 새로고침과 멈추기 버튼.
 5 홈페이지로 데려가주는 홈버튼

이상하게도 브라우저의 유저 인터페이스는 공식 명세서에 명시되어 있지 않으며 그냥 수년간 쌓인 좋은 경험과, 서로 모방하며 발전해왔다. Html5 명세는 브라우저가 반드시 가져야할 UI요소를 정의하지 않는다. 하지만 공통요소들을 목록화하긴한다. 주소바, 상태바, 툴 바들이 그에 해당한다. 물론 파이어폭스 다운로드 매니저처럼 고유한 기능도 있다.

6. 브라우저의 고 수준 구조

브라우저의 메인 요소는 다음과 같다:

 1 유저 인터페이스: 주소바, 앞뒤 가기 버튼, 북마킹등이 해당한다. 브라우저의 모든 부분이 보여준다. 요청될 페이지를 보여줄 창을 제외한 모든 부분이다.
 2 브라우저 엔진: UI와 렌더링 엔진간 행동들을 통제한다
 3 렌더링 엔진: 요청된 컨텐츠를 표시하는 역할을 한다. 예를들어 요청된 콘텐츠가 html이라면 렌더링 엔진은 html과 css를 구문분석하고 구문분석된 콘텐츠를 스크린에 보여준다.
 4 네트워킹: 네트워크 호출이나 http요청과 같은 경우, 플랫폼 독립 인터페이스 뒤에 있는 다른 플랫폼들을 위해 다른 구현들을 사용한다.
 5 ui 백엔드: 콤보상자나 창과 같은 기본 위젯을 그리는데 사용된다. 이 백엔드는 구체적 플랫폼이 아닌 일반적 인터페이스를 표시한다. 그 아래에는 운영체제 사용자 인터페이스 메서드가 사용된다.
 6 자바스크립트 인터프리터. 구문분석과 자바스크립트코드 실행을 위해 사용된다.
 7 데이터 저장 이건 지속적 층계이다. 브라우저는 아마 모든 종류의 데이터를 로컬적으로 저장해야한다. 쿠키 같은 것들 말이다. 브라우저는 로컬 스토리지나 인덱스드 디비, 웹sql,파일 시스템과 같은 저장 메커니즘을 지원한다.
크롬과 같은 브라우저는 렌더링 엔진의 여러가지 인스턴스를 실행한다는 것에 유의해야한다.

7. 렌더링 엔진

렌더링 엔진이 맡는 것은.. 렌더링이다. 브라우저창에 요청된 콘텐츠를 표시하는 것을 말한다.

기본적으로 렌더링 엔진은 html, xml문서와 이미지들을 표시할 수 있다. 또한 플러그인이나 확장자를 거쳐 다른 타입들의 데이터 또한 표시할 수 있다; 예를들어 pdf뷰어 플러그인을 사용해 pdf문서를 보여주는것. 그러나 이 챕터에서 우리는 주요한 사용 케이스에 집중할 것이다: html을 표시하고 포맷된 css를 사용하는 이미지들.

다른 브라우저들은 다른 렌더링 엔진을 사용한다. 인터넷 익스플로러는 trident, 파이어 폭스는 gecko, safari는 webkit, 크롬과 오페라(버전15이후부터)는 webkit의 사촌격되는 blink를 사용한다.

웹킷은 리눅스 플랫폼을 위한 엔진으로 시작한 오픈소스 렌더링 엔진이다. 그리고 맥과 윈도우를 지원하기 위해 애플에 의해 수정되었다. 세부사항은 webkit.org참조

8. 주요 흐름

렌더링 엔진은 네트워크 계층으로부터 요청된 문서의 콘텐츠를 가져오기 시작할 것이다. 이것은 아마 8kb덩어리에서 이루어진다.

그 이후 이것은 렌더링 엔진의 기본 흐름이다.