How browsers work. - 현대 웹브라우저의 뒷면 Aug 5, 2011 Tali Garsiel, Paul Irish
Src = https://web.dev/howbrowserswork/
 
1. 서문

 이 webkit과 gecko의 내부 작동에 대한 종합적 입문서는 이스라엘인 개발자인 탈리 가르시엘에 의해 수행된 연구들의 결과이다. 수년동안 그녀는 내부 브라우저에 대한 모든 공개된 데이터들을 리부했고, 웹브라우저 소스코드를 읽는데 많은 시간들을 보냈다. 그녀는 적었다.

 ie가 90퍼센트를 지배할때 크게 할 수 있는 것은 없었으며, 브라우저를 그냥 블랙박스 정도로 여겼다. 그러나 이제 50퍼센트를 넘는 점유율을 가진 오픈소스 브라우저들과 함께  그내부 실상을 들여다보고 웹바라우저 안에 무엇이 있는지 확인하기 좋은 시간이다. 글쎄, 그 안에 있는건 수백만줄의 씨쁠쁠 라인일 것이다.

 탈리는 그녀의 사이트에그녀의 연구를 공개했다, 하지만 우리는 그게 더 많은 독자들이 봐야한다는 것을 알고 있고, 우리는 여기에 정리해 재공개했다.

 웹 개발자로서 브라우저 작동 내부를 배우는 것은 더 나은 결정을 하는것을 돕고, 모범계발 사례뒤의 그 타당함을 알게해준다. 이게 비록 긴 문서이긴 하지만, 이걸 깊게 파보는 것을 추천한다. 우리는 당신이 한일을 당신이 기뻐할 것이라고 보장한다.

2. 도입

 웹브라우저는 가장 널리 쓰이는 소프트웨어이다. 이 입문서에서 나는 그 뒷면에서 어떻게 작동하는지 설명할 것이다. 우리는 당신이 주소창에 google.com을 칠때 브라우저 화면의 구글페이지를 보기전까지 어떤일이 일어나는지 탐구해볼것이다

3. 우리가 이야기해볼 브라우저들

 현재 데스크탑상에서 사용되는 5가지의 메인 브라우저들이 있다:chrome, IE, Firefox, safari, opera. 모바일 상에서 주요 브라우저는 안드로이드 브라우저, 아이폰 오페라 미니, 오페라 모바일, uc브라우저, 노키아 s40/s60브라우저. 크롬 등이 있다. 이러한 것들은 오페라 브라우저만 제외하고 webkit에 기초를 두고 있다. 나는 오픈소스 브라우저인 파이어폭스나 크롬, 사파리(부분적으로 오픈소스임)로부터 예를 제시해줄 것이다. Statcounter statistics에 따르면(2013 6월) 크롬과 파이어폭스 그리고 사파리는 대략 전세계 데스크탑 브라우저 사용의 71을 차지했다. 모바일에서 안드로이드 브라우저, 아이폰, 크롬은 대략 54퍼센트의 사용을 구성했다. 

4. 브라우저의 주요 기능

브라우저의 주요기능은 당신이 선택한 웹 자원을 보여주는 것이다, 서버에서 요청하고, 브라우저창을 통해 보여줌으로서. 자원은 보통 html문서이며 pdf, 이미지. 다른 콘텐츠 타입이 될 수도 있다. 리소스의 위치는 URI(uniform resource identifier)를 사용하는 사용자에 의해 구체화된다.

 브라우저가 html파일을 번역하고 보여주는 방식은 html과 css명세에서 잘 구체화 돼 있다. 이 명세는  웹을 위한 표준 기구인 w3c(World Wide Web consortium)기구에 의해 유지된다. 수년동안 브라우저는 오직 일부의 명세만을 준수하며 그들 고유의 확장자를 개발했다. 이것은 웹 작성자에 심각한 호완성 문제를 일으켰다. 오늘날 대부분의 브라우저는 더, 그리고 덜 명세를 준수한다.

 브라우저 유저 인터페이스는 서로 공통점이 많다. 유저 인터페이스 요소는 다음과 같다.

 1 uri를 넣을 수 있는 주소바.
 2 앞, 뒤로가기 버튼
 3 북마킹
 4 새로고침과 현문서 로딩을 멈출때 사용하는 새로고침과 멈추기 버튼.
 5 홈페이지로 데려가주는 홈버튼

이상하게도 브라우저의 유저 인터페이스는 공식 명세서에 명시되어 있지 않으며 그냥 수년간 쌓인 좋은 경험과, 서로 모방하며 발전해왔다. Html5 명세는 브라우저가 반드시 가져야할 UI요소를 정의하지 않는다. 하지만 공통요소들을 목록화하긴한다. 주소바, 상태바, 툴 바들이 그에 해당한다. 물론 파이어폭스 다운로드 매니저처럼 고유한 기능도 있다.

6. 브라우저의 고 수준 구조

브라우저의 메인 요소는 다음과 같다:

 1 유저 인터페이스: 주소바, 앞뒤 가기 버튼, 북마킹등이 해당한다. 브라우저의 모든 부분이 보여준다. 요청될 페이지를 보여줄 창을 제외한 모든 부분이다.
 2 브라우저 엔진: UI와 렌더링 엔진간 행동들을 통제한다
 3 렌더링 엔진: 요청된 컨텐츠를 표시하는 역할을 한다. 예를들어 요청된 콘텐츠가 html이라면 렌더링 엔진은 html과 css를 구문분석하고 구문분석된 콘텐츠를 스크린에 보여준다.
 4 네트워킹: 네트워크 호출이나 http요청과 같은 경우, 플랫폼 독립 인터페이스 뒤에 있는 다른 플랫폼들을 위해 다른 구현들을 사용한다.
 5 ui 백엔드: 콤보상자나 창과 같은 기본 위젯을 그리는데 사용된다. 이 백엔드는 구체적 플랫폼이 아닌 일반적 인터페이스를 표시한다. 그 아래에는 운영체제 사용자 인터페이스 메서드가 사용된다.
 6 자바스크립트 인터프리터. 구문분석과 자바스크립트코드 실행을 위해 사용된다.
 7 데이터 저장 이건 지속적 층계이다. 브라우저는 아마 모든 종류의 데이터를 로컬적으로 저장해야한다. 쿠키 같은 것들 말이다. 브라우저는 로컬 스토리지나 인덱스드 디비, 웹sql,파일 시스템과 같은 저장 메커니즘을 지원한다.
크롬과 같은 브라우저는 렌더링 엔진의 여러가지 인스턴스를 실행한다는 것에 유의해야한다.

7. 렌더링 엔진

렌더링 엔진이 맡는 것은.. 렌더링이다. 브라우저창에 요청된 콘텐츠를 표시하는 것을 말한다.

기본적으로 렌더링 엔진은 html, xml문서와 이미지들을 표시할 수 있다. 또한 플러그인이나 확장자를 거쳐 다른 타입들의 데이터 또한 표시할 수 있다; 예를들어 pdf뷰어 플러그인을 사용해 pdf문서를 보여주는것. 그러나 이 챕터에서 우리는 주요한 사용 케이스에 집중할 것이다: html을 표시하고 포맷된 css를 사용하는 이미지들.

다른 브라우저들은 다른 렌더링 엔진을 사용한다. 인터넷 익스플로러는 trident, 파이어 폭스는 gecko, safari는 webkit, 크롬과 오페라(버전15이후부터)는 webkit의 사촌격되는 blink를 사용한다.

웹킷은 리눅스 플랫폼을 위한 엔진으로 시작한 오픈소스 렌더링 엔진이다. 그리고 맥과 윈도우를 지원하기 위해 애플에 의해 수정되었다. 세부사항은 webkit.org참조

8. 주요 흐름

렌더링 엔진은 네트워크 계층으로부터 요청된 문서의 콘텐츠를 가져오기 시작할 것이다. 이것은 아마 8kb덩어리에서 이루어진다.

그 이후 이것은 렌더링 엔진의 기본 흐름이다.

돔 트리 구축 위해 html분석 - 렌더트리 구축 - 렌더트리 레이아웃 - 렌더트리 색칠

렌더링 엔진 기본흐름 

렌더링 엔진은 html문서 분석을 시작할 것이고, 요소를 돔 노드안의 컨텐츠트리라고 불리는 트리에 넣을 것이다. 엔진은 외부 css파일과 style엘리먼트에 모두에 있는 스타일 데이타를 분석할 것이다. 스타일링 정보는 시각적 정보와 함께 html에서 다른 트리(렌더트리)를 만드는데 사용된다.

렌더트리는 색깔과 차원과 같은 시각 속성을 사각형과 함꼐 포함한다.

렌더트리를 구축하고 렌더트리는 레이아웃 과정을 거친다. 이것은 각 노드에게 화면상 나타나야할 분명한 좌표를 제공한다는 것이다. 

다음 단계는 페인팅이다. 렌더트리는 이송될 것이고 각 노드는 ui백엔드 레이어를 사용해 색칠될 것이다.

이게 점진적 과정이라는 것을 이해하는 것은 매우 중요하다. 더 나은 유저 경험을 위해, 렌더링 엔진은 화면상에 컨텐츠를 가능한한 빠르게 표시하려 할 것이다.
전체 html이 렌더트리를 구축하고 레이아웃하기 이전에 파싱이 끝날때까지 기다리지 않을것이다. 컨텐츠의 일부가 분석되고 보여질 것이다. 반면에 프로세스과정은 네트워크로부터 계속 오는 나머지 컨텐츠와 함꼐 계속 진행될 것이다

9. 주요흐름 예시

각 브라우저마다 주요흐름은 약간씩 다름.

모식도 3과 4에서 웹킷과 겍코가 약간씩 다른 용어를 사용하지만 근본적으로 같음을 볼 수 있다.

겍코는 시각적으로 형성된 트리요소를 프레임 트리라고 부른다. 각 요소들은 프레임이다. 웹킷은 렌더트리라는 용어를 쓰고 렌더 오브젝트로 구성 돼 있다. 웹킷은 요소배치를 레이아웃이라고 부르는 반면 gecko는 reflow라고 한다. "첨부(attachment)"는 렌더트리를 만들기 위한 돔노드와 시각적 정보를 연결 시키는 것을 부르는 웹킷의 용어이다. gecko가 html과 dom 트리 사이에 추가 층을 가지고 있다는 건 사소한 비 의미적 차이이다. 컨텐츠 싱크라고 불리며 돔 요소를 만드는 공장이다. 이제 각 흐름의 부분들을 살펴보겠다.

10. 파싱 - 일반적

파싱은 렌더링 엔진에서 매우 의미있는 과정이기 때문에, 우리는 이것에 좀 더 깊게 들어가볼 것이다. 파싱에 대해 조금의 소개로 시작해보자.

문서를 파싱하다는 것은 사용할 수 있는 코드 구조로 번역한다는 것을 의미한다. 파싱의 결과는 대게 문서구조를 보여주는  노드의 트리이다. 이것은 대게 파스 트리나 신택스 트리라고 불린다. 예를들어 2 + 3 - 1을 파싱하는 것은 다음과 같은 트리를 반환한다.

수학적 표현 트리노드 모식도

11. 문법

피승은 문서가 준수하는 문법적 규칙에 기반을 두고 있다. 그것이 쓰여진 언어나 포맷 말이다. 당신이 파스할 수 있는 모든 포맷은단어나 문법적 규칙으로 이루어진 결적정 문법이 있어야한다. 이것은 문맥 자유 문법이라고 불린다. 인간어는 그런 언어가 아니기 때문에, 협의된 파싱 기술로는 파싱할 수 없다.

12. 파서 - 렉서 조합

파싱은 두가지 하위 과정들로 나눠질 수 있다. 어휘적 분석과 문법적 분석이 그것이다.

 어휘적 분석은 인풋을 토큰으로 나누는 과정이다. 토큰은 언어 어휘이다: 타당한 빌딩 블락들의 모임. 인간 언어에서 모든 단어로 이루어 질 것이고, 그 언어의 사전 형태로 나타날 것이다.

 문법적 분석은 언어 문법 법칙의 적용이다.

 파서는 두 컴퍼넌트 간의 작업을 분리한다: 렉서(가끔 토크나이저라고도 불림)는 인풋을 활성화된 토큰으로 쪼개는 역할을 하고 파서는 언어 문법 규칙에 따라 문서 구조를 분석하여. 구문분석트리를 만드는 역할을한다

 렉서는 스페이스나 개행과 같이 연관없는 문자들을 어떻게 제거할지 알고 있다.

문서 - 어휘적 분석 - 문법적 분석 - 파스트리
모식도: 소스 문서에서 파스트리로 가는 과정.

구문분석 과정은 반복적이다. 파서는 대개 렉서에 새로은 토큰을 요청하고 하나의 문법적 규칙에 따라 토큰을 매칭 시키고 싶어한다. 만약 규칙이 매칭됐다면. 노드는 토큰에 따라 파스 트리에 추가될 것이고, 파서는 다른 토큰을 찾을 것이다. 규칙이 매칭된다면, 노드는 토큰에 반응할것이고 파스트리에 더해지고 파서는 다른 토큰을 요청할 것이다.

만약 규칙이 매칭되지 않는다면 파서는 토큰을 내부적으로 저장할 것이고, 룰이 모든 내부적으로 저장된 토큰들이 매칭될때까지 토큰을 요청할 것이다.

13. 번역

많은 경우에서 파스트리는 최종 생산물이 아니다. 파싱은 주로 번역에 쓰인다: 인풋 문서를 다른 포맷으로 바꾸는. 그 예가 바로 컴파일이다. 소스코드를 머신코드로 컴파일 하는 컴파일러는 먼저 파스트리로 그것을 파스하고 트리를 머신 코드 문서로 번역한다.

 소스코드 - 파싱 - 파스트리 - 번역 - 머신코드
모식도: 컴파일 흐름

14. 파싱의 예

위 모식도 5에서 우리는 수식표현에서 파스 트리를 만들었다. 간단한 수학적 언어를 정의한뒤 파스 프로세스를 들여다보자.

 
 중요 용어
 언어들은 인티저를 포함할 수 있고 , 플마 기호를 쓸 수 잇다.

문법:

 1. 언어 구문 구성요소는 표현, 용어와 연산이다.
 2. 우리 언어는 어떤 양이든 표현을 포함할 수 있다.
 3. 표현은 용어나, 연산, 그리고 다른 용어들로 정의된다.
 4. 연산은 플러스 토큰이나, 마이너스 토큰이다.
 5. 용어는 인티저 토큰이거나, 표현이다.

 함께 인풋 2 + 3 - 1 을 분석해보자.

규칙과 일치하는 첫번쨰 하위 문자는 2이다: 문법 5에 따리면 이것은 용어이다. 두번쨰 매칭되는 것은 2+3이다: 문법 3과 일치: 다른 항에 이은 연산에 이은 항.

다음 매칭은 인풋이 끝날때만 적중한다. 2+3-1은 표현이다. 왜냐하면 우리는 2+3이 이미 텀이라는 것을 알고 있고 그래서 다른 항에 연산에 항이다. 2++과 매칭되는  규칙은 하나도 없고 그러므로 유효하지 않은 인풋이다.

 15. 어휘와 구문에대한 공식적 정의

어휘는 정규식으로 표현된다.
예를들어 우리 언어는 다움과 같이 정의 될 것이다.
INTEGER: 0|[1-9][0-9]*
PLUS: +
MINUS: -

당신이 볼 수 있듯이 인티저는 정규식에 의해 정의 됐다.

구문은 BNF라고 불리는 포맷으로 정의되고는 한다. 우리 언어는 다음과 같이정의될 것이다.

expression :=  term  operation  term
operation :=  PLUS | MINUS
term := INTEGER | expression

언어는 정규파서들에 의해 파싱 될 수 있다 만약 그 문법이 자유 문맥 문법이라면. 문맥자유문법의 직관적 정의는 완전히 BNF로 표현될 수 있는 문법이다. 공식적 정의를 보고 싶다면 문맥자유문법에대한 위키디피아 글 보삼


 16. 파서의 유형

파서에는 두가지 유형이 있다. 탑다운 파서와, 바텀 업 파서이다. 직관 적으로 설명해보자면 하향식 파서는 구문의 고수준 구조를 검토하고, 매칭되는 문법 규칙을 찾으려 한다.
상향식 파서의 경우는 인풋으로 시작하고 점진적으로 그것을 구문 규칙으로 바꾼다. 낮은 단계의 규칙에서 시작해 맞는 규칙을 찾을때까지 고수준으로 올라간다.

두 유형의 파서가 내 예를 어떻게 파싱할 수 있는지 살펴보자.

하향식 파서는 고수준 규칙에서 시작한다: 2+3을 표현식으로 식별할 것이고, 그다음으로 2+3-1을 표현식으로써 식별할 것이다.(식을 식별하는 과정은 다른 규칙과 일치하도록 나아가지만 시작점은 가장 고수준의 규칙에서이다)

상향식 파서는 규칙이 패칭될때까지 인풋을 검사할 것이다. 그 다음으로 매칭 인풋을 다른 규칙과 교환할 것이다.

상향식 파서는 규칙이 매칭될때까지 인풋을 스캔할 것이다. 그리고나서 매칭된 인풋을 규칙으로 교환할 것이다. 이 과정은 인풋이끝날때까짖 진행된다. 매칭된 표현식은 부분적으로 계속 파서스택에 위치하게 된다.

Stack	             Input
                    2 + 3 - 1
term	            + 3 - 1
term operation	    3 - 1
expression	     - 1
expression operation	1
expression	      -

이런 유형의 상향식 바서를 시프트 리듀스 파서라고 한다, 왜냐하면 인풋은 오른쪽으로 계속 이동 할 것이기 때문이다(포인터가 인풋의 첫번째를 가리키고 점차 오른쪽으로 이동하는 것을 상상해봐라) 그리고 점진적으로 구문 규칙으로 감소하는 것을

17. 파서를 자동적으로 생성하는 일.

파서를 발생시킬 수 있는 도구가 있다. 너는 그것들에 너의 언어 문법을 먹인다. - 어휘와 구문 규칙- 그러면 그것들은 파서 작업을 생성한다. 파서를 생성하는 일은 파싱에 대한 깊은 이해가 있어야 되며, 수작업으로 최적화된 파서를 만드는 것은 쉬운 일이 아니다. 그래서 파서 생성기는 매우 유용할 수 있다.

 웹킷은 두가지 잘 알려진 파서 생성기들을 이용한다. 렉서를 생성하기 위한 FLEX. 파서를 생성하기 위한 BISON(아마 LEX와 YACC라는 이름으로 실행할 것이다.) 플렉스 입력은 토큰의 정규식 정의를 포함하는 파일이다. 바이슨의 입력은 bnf포맷에 따른 언어 구문 규칙이다.