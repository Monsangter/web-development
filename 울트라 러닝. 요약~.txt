울트라 러닝 도쿠감

법칙 5 인출하기

라마누잔은 대학도 안다니고 고졸이엿는데 수학만 좋아해서 난제에 대한 엄청난 수식과 증명들을 발견해내엇다.

한번 복습하기, 여러번 복습하기, 개념도 작성, 자유회상(이전에 공부한 것을 일정 시간이 지난후 다시 기억해내는 셤)
네가지를 해봣을떄 자유회상이 약 50퍼센트가량 결과가 좋았다. 

왜 그럴까에 대한 주장은 두가지가 있는데, 자체 시험과 실제시험의 형식이 유사해서라는 주장이 잇지만 형식을 개념도로 바꿔도
자유회상이 더 우월했다.
다음 설명은 피드백이다. 하지만 인출방식이 단순히 더 많은 핃백을 끌어내는 것은 아니며 실험에서 자유회상한 학생들은 어떤
피드백도 받지 못했다. 즉 피드백과 연계되는 걸 넘어서 그냥 좋은 학습도구임.

우리는 잘 배웠는지 확인 하는 능력은 없다. 그냥 주변적 단서에 의지할뿐. 과제를 평이하게 처리할 수 있으면 쉽다,
어려우면 아직 습득 못했다고 느낀다. 몇분간의 시간이 지난후에는 단순복습이 이득일지 모르나 더 긴 시간이 지나면 인출이 수동적 복습을 이긴다. 주관적으로 본인이 준비됏다 안됏다 느끼는 거랑 상관없이 인출이 더 이득임.

인출 수준이 어렵고 단서가 주어지지 않을 수록 기억에 더 잘 남는다. 하지만 인출이 불가능 할만큼 어려워지는건 비추임. 시험은 학습뒤 조금 보는게 더 이득이다. 그렇다고 다 까먹을때까지 안보면 안댐.

아직 안배운것도 인출 하려는 시도하면 검색전략 강화함. 사전연습의 효과도 잇음.

단순히읽는 게 인출보다 더 비효율 적이기 떔에 나쁜 습관 버리기 힘듬. 위대한 프로그래머는 문제를 푸는 수십가지 방법을 알고 잇으며 각 상황에서 최선의 방법을 택할 수 잇다. 우리가 검색할 수 잇는 정보 양은 늘었지만 머리속에 어느정도 지식이 없으면  문제 푸는데 도움이 안댐. 어느정도 수동적으로 지식에 노출된 후에 인출연습으로 이득보기.

인출 방법으론 네 가지가 있음. 

1. 낱말카드. 그런데 프로그램에 적용되는 개념은 단서-반응이라고 하는 낱말 카드의 기본틀에 적합하지 않은 경우가 많음.
2. 자유회상. 어느 한부분을 읽거나 강의를 들은뒤, 빈종이에 기억나는 모든것을 적어봄.
3. 문제집 방식. 메모내용을 문제로 바꿔놓고 나중에 답하기. 시시콜콜하ㅔ 너무 디테일한 부분까지 질문 만들면 안댐. 그냥 그장이나 부문에 대한 큰개념을 질문으로 재작성해보기. 각 장별로 질문을 한가지로 제한하면 좋음.
4. 도전 만들기. 앞의 세가지는 광범위한 발상 요약에 적합. 어떤 기술을 시행하려면 충분치 않음. 프로그래머라면 알고르짐을 아는 것뽄만 아니라 작성가능해야함. 나중에 해결할 과제 목록을 만들어보삼.
5.클로즈 북 학습법. 개념도가 큰 효율을 보여주지는 못했지만 책을 덮고 개념도를 작성하는 전략을 사용해보삼. 
라마누잔은 강박적일만큼 높은강도와 인출방식의 도움을 받음.

하지만 해답을 복습하지 않고 만들어내는 시도는 반쪽짜리 해결책임. 이게 완전해지려면 우리가 머리속에 떠올리는 해답이 올바른 것인지 알 수 있어야함. 마음의 준비가 될때까지 자체시험을 회피하는 것처럼. 맘에 들떄까지 우리 현실직시를 포기하기도함.
떔에 피드백이 중요.